// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  full_name,
  email,
  agency,
  app_contact,
  app_contact_email
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING username, hashed_password, full_name, email, address_id, agency, app_contact, app_contact_email, password_changed_at, created_at
`

type CreateUserParams struct {
	Username        string         `json:"username"`
	FullName        string         `json:"full_name"`
	Email           string         `json:"email"`
	Agency          sql.NullString `json:"agency"`
	AppContact      sql.NullString `json:"app_contact"`
	AppContactEmail sql.NullString `json:"app_contact_email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.FullName,
		arg.Email,
		arg.Agency,
		arg.AppContact,
		arg.AppContactEmail,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.AddressID,
		&i.Agency,
		&i.AppContact,
		&i.AppContactEmail,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, hashed_password, full_name, email, address_id, agency, app_contact, app_contact_email, password_changed_at, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.AddressID,
		&i.Agency,
		&i.AppContact,
		&i.AppContactEmail,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
