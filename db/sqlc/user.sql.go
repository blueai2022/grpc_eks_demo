// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  hashed_password,
  full_name,
  email,
  agency,
  app_contact,
  app_contact_email
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING username, hashed_password, full_name, email, address_id, agency, app_contact, app_contact_email, password_changed_at, created_at
`

type CreateUserParams struct {
	Username        string         `json:"username"`
	HashedPassword  string         `json:"hashed_password"`
	FullName        string         `json:"full_name"`
	Email           string         `json:"email"`
	Agency          sql.NullString `json:"agency"`
	AppContact      sql.NullString `json:"app_contact"`
	AppContactEmail sql.NullString `json:"app_contact_email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.Agency,
		arg.AppContact,
		arg.AppContactEmail,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.AddressID,
		&i.Agency,
		&i.AppContact,
		&i.AppContactEmail,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT username, hashed_password, full_name, email, address_id, agency, app_contact, app_contact_email, password_changed_at, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.AddressID,
		&i.Agency,
		&i.AppContact,
		&i.AppContactEmail,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT username, hashed_password, full_name, email, address_id, agency, app_contact, app_contact_email, password_changed_at, created_at FROM users
WHERE username = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserForUpdate, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.AddressID,
		&i.Agency,
		&i.AppContact,
		&i.AppContactEmail,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT username, hashed_password, full_name, email, address_id, agency, app_contact, app_contact_email, password_changed_at, created_at FROM users
WHERE agency = $1
ORDER BY username
LIMIT $2
OFFSET $3
`

type ListUsersParams struct {
	Agency sql.NullString `json:"agency"`
	Limit  int32          `json:"limit"`
	Offset int32          `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Agency, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.Username,
			&i.HashedPassword,
			&i.FullName,
			&i.Email,
			&i.AddressID,
			&i.Agency,
			&i.AppContact,
			&i.AppContactEmail,
			&i.PasswordChangedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  hashed_password = COALESCE($1, hashed_password),
  full_name = COALESCE($2, full_name),
  email = COALESCE($3, email)
WHERE
  username = $4
RETURNING username, hashed_password, full_name, email, address_id, agency, app_contact, app_contact_email, password_changed_at, created_at
`

type UpdateUserParams struct {
	HashedPassword sql.NullString `json:"hashed_password"`
	FullName       sql.NullString `json:"full_name"`
	Email          sql.NullString `json:"email"`
	Username       string         `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.AddressID,
		&i.Agency,
		&i.AppContact,
		&i.AppContactEmail,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
